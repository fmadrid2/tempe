{% macro copy_fastq(fastq) %}

- name: copy_fastqs_{{ fastq.basename | replace(".", "_") }}
  input: {{ fastq.fastqPath }}
  output: temp/fastqs/{{ fastq.basename }}
  tags: [rsync,]
  retry: 2
  cpus: 6
  walltime: "4:00:00"
  queue_preset: "DATA-MOVER"
  container: {{ constants.tools.base.container }}
  digest: {{ constants.tools.base.digest }}
  cmd: |
    set -uev

    mkdir -p temp/fastqs/

    if [ ! -f temp/fastqs/{{ fastq.basename }} ]; then
      {% if fastq.fileType == "fasterq" %}
      rsync "{{ fastq.fastqPath|replace(".fastq.gz",".fasterq") }}" "temp/fastqs/"
      {% else %}
      rsync "{{ fastq.fastqPath }}" "temp/fastqs/"
      {% endif %}
    else
      echo "Fastq file already exists locally skipping rsync"
    fi
    {#
    This will only run in special circumstances and will not be enablable from kbase.
    Expecation is that after rsync, which should be error free, we no longer need the
    fastq from the source location.
    #}
    {% if tasks["DANGEROUS_delete_source_fastq_after_rsync"]|default(false) %}
    rm {{ fastq.fastqPath }}
    {% endif %}

{% endmacro %}
