
{% macro tumor_only_variant_filter(pair, input_vcf, temp_dir, variant_caller, origin) %}

{% if input_vcf.endswith('.vcf') %}
  {% set vcf_prefix = input_vcf.split('.')[:-1]|join('.') %}
{% elif input_vcf.endswith('.vcf.gz') %}
  {% set vcf_prefix = input_vcf.split('.')[:-2]|join('.') %}
{% else %}
  {{ raise('{} does not appear to be a vcf!'.format(input_vcf)) }}
{% endif %}

{% set output_vcf %}{{ vcf_prefix }}.flt.vcf.gz{% endset %}
{% set temp_vcf_prefix %}{{ temp_dir }}/{{ vcf_prefix | basename }}{% endset %}
{% set DB_member %}(INFO/GNOMAD_EXOME=1 | INFO/GNOMAD_GENOME=1 | INFO/TOPMED=1){% endset %}
{% set DB_exclude %}(INFO/TOPMED_AC>5 | INFO/GNOMAD_GENOME_AC>5 | INFO/GNOMAD_EXOME_AC>5){% endset %}
{% set COSMIC_filter %}(INFO/COSMIC_CNT>=1 | INFO/COSMIC_NC_CNT>=1){% endset %}
{% if variant_caller == 'merged' and pair.callers is defined and pair.callers | length > 1 %}
  {% if pair.callers | length > 3 %}
    {% set CC_filter %}INFO/CC>={{ pair.callers | length - 2 }}{% endset %}
  {% else %}
    {% set CC_filter %}INFO/CC>={{ pair.callers | length - 1 }}{% endset %}
  {% endif %}
{% endif %}

- name: tumor_only_variant_filtering_{{ pair.name }}_{{ variant_caller }}_{{ origin }}
  tags: [{{ pair.gltype }}, tumor_only, variant_filter, {{ variant_caller }}, {{ pair.name }}]
  {% if temp_dir in input_vcf %}
  reset: predecessors
  {% endif %}
  input: {{ input_vcf }}
  output: {{ output_vcf }}
  cpus: 1
  mem: 4G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  digest: {{ constants.tools.bcftools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ temp_dir }}

    {# We need to do tiered filtering since we can't use -i and -e at the same time #}
    bcftools view \
      {% if variant_caller == 'merged' %}
      --include "{{ CC_filter }} & {{ DB_member }} & {{ COSMIC_filter }}" \
      {% else %}
      --include "{{ DB_member }} & {{ COSMIC_filter }}" \
      {% endif %}
      {{ input_vcf }} |\
      bcftools view \
        --exclude "{{ DB_exclude }}" \
        --output-file {{ temp_vcf_prefix }}.filtered_db.vcf.gz --output-type z -

    bcftools index --force {{ temp_vcf_prefix }}.filtered_db.vcf.gz

    {# Creating a vcf of variants that do not exist in gnomad/topmed #}
    bcftools view \
      {% if variant_caller == 'merged' %}
      --include "{{ CC_filter }}" \
      {% endif %}
      {{ input_vcf }} |\
      bcftools view \
        --exclude "{{ DB_member }}" \
        --output-file {{ temp_vcf_prefix }}.not_in_db.vcf.gz --output-type z -

    bcftools index --force {{ temp_vcf_prefix }}.not_in_db.vcf.gz

    {# Merging the vcf containing filtered variants annotated by gnomad/topmed and those that did not exist in the db #}
    bcftools concat \
      --allow-overlaps \
      {{ temp_vcf_prefix }}.filtered_db.vcf.gz \
      {{ temp_vcf_prefix }}.not_in_db.vcf.gz |\
    bcftools sort \
      --output-file {{ output_vcf }} --output-type z -

    bcftools index --threads 4 --tbi --force {{ output_vcf }}
    bcftools index --threads 4 --force {{ output_vcf }}

{% set output_vcf %}{{ vcf_prefix }}.flt_v2.vcf.gz{% endset %}
{% set threshold = "0.10" %}
{# Ratios are capped in a range of 0-1, with 1 indicating an AC value of 0 #}
{% set TOPMED_CNT_RATIO %}(INFO/COSMIC_CNT/(INFO/COSMIC_CNT + INFO/TOPMED_AC)>={{ threshold }}){% endset %}
{% set TOPMED_NC_CNT_RATIO %}(INFO/COSMIC_NC_CNT/(INFO/COSMIC_NC_CNT + INFO/TOPMED_AC)>={{ threshold }}){% endset %}
{% set GNOMAD_GENOME_CNT_RATIO %}(INFO/COSMIC_CNT/(INFO/COSMIC_CNT + INFO/GNOMAD_GENOME_AC)>={{ threshold }}){% endset %}
{% set GNOMAD_GENOME_NC_CNT_RATIO %}(INFO/COSMIC_NC_CNT/(INFO/COSMIC_NC_CNT + INFO/GNOMAD_GENOME_AC)>={{ threshold }}){% endset %}
{% set GNOMAD_EXOME_CNT_RATIO %}(INFO/COSMIC_CNT/(INFO/COSMIC_CNT + INFO/GNOMAD_EXOME_AC)>={{ threshold }}){% endset %}
{% set GNOMAD_EXOME_NC_CNT_RATIO %}(INFO/COSMIC_NC_CNT/(INFO/COSMIC_NC_CNT + INFO/GNOMAD_EXOME_AC)>={{ threshold }}){% endset %}
{% set INCLUDE_NON_DB %}(INFO/TOPMED==0 & INFO/GNOMAD_GENOME=0 & INFO/GNOMAD_EXOME=0){% endset %}
{% set INCLUDE_FROM_RATIO %}({{ TOPMED_CNT_RATIO }} | {{ TOPMED_NC_CNT_RATIO }} | {{ GNOMAD_GENOME_CNT_RATIO }} | {{ GNOMAD_GENOME_NC_CNT_RATIO }} | {{ GNOMAD_EXOME_CNT_RATIO }} | {{ GNOMAD_EXOME_NC_CNT_RATIO }}){% endset%}

- name: tumor_only_variant_filtering_v2_{{ pair.name }}_{{ variant_caller }}_{{ origin }}
  tags: [{{ pair.gltype }}, tumor_only, variant_filter, {{ variant_caller }}, {{ pair.name }}]
  {% if temp_dir in input_vcf %}
  reset: predecessors
  {% endif %}
  input: {{ input_vcf }}
  output: {{ output_vcf }}
  cpus: 4
  mem: 8G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  digest: {{ constants.tools.bcftools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ temp_dir }}

    {# Goal of the following filters - output likely somatic variants, e.g. remove germline variants
      INCLUDE_NON_DB = Includes variants found in COSMIC, but not found in GNOMAD or TOPMED
      INCLUDE_FROM_RATIO = Includes variants that meet the threshold for COSMIC_CNT/AC, indicating likely somatic
    #}
    bcftools view \
      --threads 4 \
      {% if variant_caller == 'merged' %}
      --include '{{ CC_filter }} & ({{ INCLUDE_NON_DB }} | {{ INCLUDE_FROM_RATIO }})' \
      {% else %}
      --include '{{ INCLUDE_NON_DB }} | {{ INCLUDE_FROM_RATIO }}' \
      {% endif %}
      --output-file {{ output_vcf }} --output-type z \
      {{ input_vcf }}

    bcftools index --threads 4 --tbi --force {{ output_vcf }}

{% endmacro %}

{% macro filter_variants(pair, input_vcf, output_dir, output_vcf, task) %}

{# Checking if CC_filter is already defined, in preparation for allowing user defined filters #}
{% if CC_filter is not defined %}
  {% if pair.callers is defined and pair.callers|length > 1 %}
    {% if pair.callers | length > 3 %}
      {% set CC_filter %}INFO/CC>={{ pair.callers | length - 2 }}{% endset %}
    {% else %}
      {% set CC_filter %}INFO/CC>={{ pair.callers | length - 1 }}{% endset %}
    {% endif %}
  {% endif %}
{% endif %}

{# Checking for output_vcf type, e.g. vcf.gz, vcf, bcf #}
{% if output_vcf.endswith('vcf') %}
  {% set output_type = 'v' %}
{% elif output_vcf.endswith('bcf') %}
  {% set output_type = 'b' %}
{% else %}
  {% set output_type = 'z' %}
{% endif %}

- name: variant_filtering_{{ pair.name }}_{{ task }}
  tags: [{{ pair.gltype }}, somatic, variant_filter, {{ pair.name }}]
  input: {{ input_vcf }}
  output: {{ output_vcf }}
  cpus: 1
  mem: 4G
  walltime: "4:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  digest: {{ constants.tools.bcftools.digest }}
  cmd: |
    set -eu
    set -o pipefail

    mkdir -p {{ output_dir }}

    bcftools view \
      {% if CC_filter is defined %}
      --include "{{ CC_filter }}" \
      {% endif %}
      --output-file {{ output_vcf }} \
      --output-type {{ output_type }} \
      {{ input_vcf }}

    {# No need to index vcf if it isn't compressed #}
    {% if output_type != 'v' %}
    bcftools index --force {{ output_vcf }}
    {% endif %}

{% endmacro %}
