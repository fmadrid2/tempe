{% from 'utilities/remove_files.jst' import remove_files with context %}
{% from 'utilities/vcf_stats.jst' import vcf_stats with context %}

{% macro strelka2_somatic(pair, aligner='bwa') %}
{% do pair.callers.append('strelka2') %}
{% set normal_bam %}{{ pair.normal.gltype }}/alignment/{{ aligner }}/{{ pair.normal.name }}/{{ pair.normal.name }}.{{ aligner }}.bam{% endset %}
{% set tumor_bam %}{{ pair.tumor.gltype }}/alignment/{{ aligner }}/{{ pair.tumor.name }}/{{ pair.tumor.name }}.{{ aligner }}.bam{% endset %}
{% set indel_candidates %}{{ pair.gltype }}/somatic_structural_calls/manta/{{ pair.name }}/{{ pair.name }}.{{ aligner }}.manta.candidateSmallIndels.vcf.gz{% endset %}
{% set results_dir %}{{ pair.gltype }}/somatic_variant_calls/strelka2/{{ pair.name }}{% endset %}
{% set temp_dir %}temp/{{ pair.gltype }}/somatic_variant_calls/strelka2/{{ pair.name }}_{{ aligner }}{% endset %}
{% set all_vcf %}{{ results_dir }}/{{ pair.name }}.{{ aligner }}.strelka2.all.vcf.gz{% endset %}
{% set pass_vcf %}{{ results_dir }}/{{ pair.name }}.{{ aligner }}.strelka2.pass.vcf.gz{% endset %}

{# empty input, is this okay? #}
- name: strelka2_build_call_regions_{{ pair.name }}_{{ aligner }}
  output:
    - {{ temp_dir }}/callRegions.bed
  cpus: 1
  mem: 2G
  walltime: "1:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.base.container }}
  cmd: |
    set -eu
    set -o pipefail

    {# Purge any existing run files prior to starting #}
    rm -r "{{ temp_dir }}" || true
    mkdir -p "{{ temp_dir }}"

    {#
    # In order to restrict calling to only the specified regions
    # strelka requires a bed file (that has been bgzipped and indexed
    # with tabix). Here we generate that file on the fly, store in
    # the run dir, and pass the path to Strelka.
    #}
    TAB=$'\t'
    cat <<EOF > "{{ temp_dir }}/callRegions.bed"
    {% for contig in constants.tempe.calling_contigs %}
    {{ contig.contig }}${TAB}0${TAB}{{ contig.length }}
    {% endfor %}
    EOF


- name: strelka2_process_call_regions_{{ pair.name }}_{{ aligner }}
  reset: predecessors
  input:
    - {{ temp_dir }}/callRegions.bed
  output:
    - {{ temp_dir }}/callRegions.bed.gz
    - {{ temp_dir }}/callRegions.bed.tbi
  cpus: 1
  mem: 2G
  walltime: "1:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.htslib.container }}
  cmd: |
    set -eu
    set -o pipefail

    bgzip -f "{{ temp_dir }}/callRegions.bed"
    tabix -f -p bed "{{ temp_dir }}/callRegions.bed.gz"


- name: strelka2_{{ pair.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, somatic, snp_indel_caller, strelka2, {{ pair.name }}]
  reset: predecessors
  input:
    - {{ normal_bam }}
    - {{ tumor_bam }}
    - {{ indel_candidates }}
    - {{ indel_candidates }}.tbi
    - {{ temp_dir }}/callRegions.bed.gz
    - {{ temp_dir }}/callRegions.bed.tbi
    - {{ constants.tempe.reference_fasta }}
  output:
    - {{ temp_dir }}/results/variants/somatic.indels.vcf.gz
    - {{ temp_dir }}/results/variants/somatic.snvs.vcf.gz
    - {{ temp_dir }}/results/realigned/realigned.normal.bam
    - {{ temp_dir }}/results/realigned/realigned.tumor.bam
  cpus: 20
  mem: 20G
  walltime: "24:00:00"
  queue_preset: "DEFAULT"
  container: {{ constants.tools.strelka.container }}
  cmd: |
    set -eu
    set -o pipefail

    {#
    # Some settings are only configurable via an ini file. Here
    # we generate this ini file and save it to the run dir.
    #}
    cat <<EOF > "{{ temp_dir }}/config.ini"
    [StrelkaSomatic]
    isWriteRealignedBam = 1
    EOF

    {# Build the Strelka run file #}
    configureStrelkaSomaticWorkflow.py \
      {% if pair.gltype == 'exome' %}
      --exome \
      {% endif %}
      --config "{{ temp_dir }}/config.ini" \
      --callRegions "{{ temp_dir }}/callRegions.bed.gz" \
      --normalBam "{{ normal_bam }}" \
      --tumorBam "{{ tumor_bam }}" \
      --indelCandidates "{{ indel_candidates }}" \
      --ref "{{ constants.tempe.reference_fasta }}" \
      --runDir "{{ temp_dir }}"

    {# Execute on the local machine with 19 parallel jobs #}
    "{{ temp_dir }}/runWorkflow.py" -m local -j 19

    mkdir -p "{{ results_dir }}/evidence"


- name: strelka2_save_evidence_{{ pair.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, somatic, snp_indel_caller, strelka2, {{ pair.name }}]
  reset: predecessors
  input:
    - {{ temp_dir }}/results/realigned/realigned.normal.bam
    - {{ temp_dir }}/results/realigned/realigned.tumor.bam
    - {{ constants.tempe.reference_fasta }}
  output:
    {% if cram|default(true) %}
    - {{ results_dir }}/evidence/{{ pair.normal.name }}.{{ aligner }}.strelka2.realigned.cram
    - {{ results_dir }}/evidence/{{ pair.normal.name }}.{{ aligner }}.strelka2.realigned.cram.crai
    - {{ results_dir }}/evidence/{{ pair.tumor.name }}.{{ aligner }}.strelka2.realigned.cram
    - {{ results_dir }}/evidence/{{ pair.tumor.name }}.{{ aligner }}.strelka2.realigned.cram.crai
    {% else %}
    - {{ results_dir }}/evidence/{{ pair.normal.name }}.{{ aligner }}.strelka2.realigned.bam
    - {{ results_dir }}/evidence/{{ pair.normal.name }}.{{ aligner }}.strelka2.realigned.bam.bai
    - {{ results_dir }}/evidence/{{ pair.tumor.name }}.{{ aligner }}.strelka2.realigned.bam
    - {{ results_dir }}/evidence/{{ pair.tumor.name }}.{{ aligner }}.strelka2.realigned.bam.bai
    {% endif %}
  cpus: 8
  mem: 16G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.samtools.container }}
  cmd: |
    set -eu
    set -o pipefail

    {# Move and rename the evidence bams or make crams #}
    {% if cram|default(true) %}
    samtools view \
      -C \
      -@ 8 \
      --reference {{ constants.tempe.reference_fasta }} \
      -o {{ results_dir }}/evidence/{{ pair.normal.name }}.{{ aligner }}.strelka2.realigned.cram \
      {{ temp_dir }}/results/realigned/realigned.normal.bam

    samtools index {{ results_dir }}/evidence/{{ pair.normal.name }}.{{ aligner }}.strelka2.realigned.cram

    samtools view \
      -C \
      -@ 8 \
      --reference {{ constants.tempe.reference_fasta }} \
      -o {{ results_dir }}/evidence/{{ pair.tumor.name }}.{{ aligner }}.strelka2.realigned.cram \
      {{ temp_dir }}/results/realigned/realigned.tumor.bam

    samtools index {{ results_dir }}/evidence/{{ pair.tumor.name }}.{{ aligner }}.strelka2.realigned.cram
    {% else %}
    mv "{{ temp_dir }}/results/realigned/realigned.normal.bam" "{{ results_dir }}/evidence/{{ pair.normal.name }}.{{ aligner }}.strelka2.realigned.bam"
    mv "{{ temp_dir }}/results/realigned/realigned.normal.bam.bai" "{{ results_dir }}/evidence/{{ pair.normal.name }}.{{ aligner }}.strelka2.realigned.bam.bai"
    mv "{{ temp_dir }}/results/realigned/realigned.tumor.bam" "{{ results_dir }}/evidence/{{ pair.tumor.name }}.{{ aligner }}.strelka2.realigned.bam"
    mv "{{ temp_dir }}/results/realigned/realigned.tumor.bam.bai" "{{ results_dir }}/evidence/{{ pair.tumor.name }}.{{ aligner }}.strelka2.realigned.bam.bai"
    {% endif %}


- name: strelka2_filter_variants_{{ pair.name }}_{{ aligner }}
  tags: [{{ pair.gltype }}, somatic, snp_indel_caller, strelka2, {{ pair.name }}]
  reset: predecessors
  input:
    - {{ temp_dir }}/results/variants/somatic.indels.vcf.gz
    - {{ temp_dir }}/results/variants/somatic.snvs.vcf.gz
    {% if pair.gltype == 'exome' %}
    - {{ pair.tumor.capture_kit.extended_bed }}
    {% endif %}
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpus: 1
  mem: 2G
  queue_preset: "DEFAULT"
  container: {{ constants.tools.bcftools.container }}
  cmd: |
    set -eu
    set -o pipefail

    {# Merge the snvs and indels into a final vcf #}
    bcftools concat \
      --allow-overlaps \
      --threads 1 \
      --output-type z \
      --output "{{ all_vcf }}" \
      "{{ temp_dir }}/results/variants/somatic.indels.vcf.gz" \
      "{{ temp_dir }}/results/variants/somatic.snvs.vcf.gz"

    bcftools index --tbi --force "{{ all_vcf }}"

    {# Then filter out the PASS variants to a separate file #}
    bcftools filter \
      --output-type z \
      --include 'FILTER == "PASS"' \
      {% if pair.gltype == 'exome' %}
      --targets-file "{{ pair.tumor.capture_kit.extended_bed }}" \
      {% endif %}
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"

    bcftools index --tbi --force "{{ pass_vcf }}"

    {# Finally remove the run dir #}
    {% set task_list = [] %}
    {% set task %}strelka2_filter_variants_{{ pair.name }}_{{ aligner }}{% endset %}
    {% do task_list.append(task) %}
    {% set task %}strelka2_save_evidence_{{ pair.name }}_{{ aligner }}{% endset %}
    {% do task_list.append(task) %}
    {% set directory %}{{ temp_dir }}{% endset %}
    {{- remove_files(directory,none,task_list) }}
    {{- vcf_stats(pass_vcf, results_dir) }}
    {{- vcf_stats(all_vcf, results_dir) }}

{% endmacro %}
