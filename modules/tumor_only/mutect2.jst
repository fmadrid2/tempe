{% from 'utilities/remove_files.jst' import remove_files with context %}
{% from 'utilities/vcf_stats.jst' import vcf_stats with context %}

{% macro mutect2_tumor_only(tumor, aligner='bwa') %}
{% set tumor_bam %}{{ tumor.gltype }}/alignment/{{ aligner }}/{{ tumor.name }}/{{ tumor.name }}.{{ aligner }}.bam{% endset %}
{% set temp_dir %}temp/{{ tumor.gltype }}/tumor_only_variant_calls/mutect2/{{ tumor.name }}_{{ aligner }}{% endset %}
{% set results_dir %}{{ tumor.gltype }}/tumor_only_variant_calls/mutect2/{{ tumor.name }}{% endset %}
{% set all_vcf %}{{ results_dir }}/{{ tumor.name }}.{{ aligner }}.mutect2.all.vcf.gz{% endset %}
{% set pass_vcf %}{{ results_dir }}/{{ tumor.name }}.{{ aligner }}.mutect2.pass.vcf.gz{% endset %}

{% for batch in constants.tempe.calling_intervals %}
- name: tumor_only_mutect2_{{ tumor.name }}_{{ aligner }}_{{ loop.index }}
  tags: [{{ tumor.gltype }}, tumor_only, snp_indel_caller, gatk_mutect2, {{ tumor.name }}]
  input:
    - {{ tumor_bam }}
  output:
    - {{ temp_dir }}/{{ loop.index }}.mutect2.vcf.gz
    - {{ temp_dir }}/{{ loop.index }}.mutect2.vcf.gz.stats
    - {{ temp_dir }}/{{ loop.index }}.f1r2.tar.gz
  cpus: 4
  mem: 16G
  walltime: "24:00:00"
  container: {{ constants.tools.mutect.container }}
  sbatch_args: ['--profile=ltask', '--acctg-freq=task=1']
  container:
  digest:
  cmd: |
    sbatch -n1 -d$SLURM_JOB_ID --wrap="sh5util -j $SLURM_JOB_ID"
    set -eu
    set -o pipefail

    mkdir -p "{{ temp_dir }}/temp_mutect2_{{ loop.index }}"

    {#
      Create the read orientation file
      This is not absolutely needed but is implemented in the Broad WDL for a cromwell issue
      Internally we have random failure associated with a complete MuTect run but no read orientation file created
    #}
    touch "{{ temp_dir }}/{{ loop.index }}.f1r2.tar.gz"

    {#
      we always use a matching normal from the same patient
      not using -pon as we often don't have a set of matching normals with the identical assay
      not using --alleles to force calls at specific locations
      might want to enable "--bam-output "{{ temp_dir }}/{{ loop.index }}.bamout.bam" \"
      but it makes a very big bam file
    #}

    gatk Mutect2 \
      --java-options "-Xmx14G" \
      --tmp-dir {{ temp_dir }}/temp_mutect2_{{ loop.index }}/ \
      --reference {{ constants.tempe.reference_fasta }} \
      --germline-resource {{ constants.tempe.gnomad_genome_mutect_germlinereference }} \
      --input "{{ tumor_bam }}" \
      --tumor-sample "{{ tumor.rgsm }}" \
      {% for interval in batch %}
      -L "{{ interval.contig }}:{{ interval.start }}-{{ interval.stop }}" \
      {% endfor %}
      --output "{{ temp_dir }}/{{ loop.index }}.mutect2.vcf.gz" \
      --f1r2-tar-gz "{{ temp_dir }}/{{ loop.index }}.f1r2.tar.gz" \
      --independent-mates true

{% endfor %}

{% for batch in constants.tempe.calling_intervals %}
- name: tumor_only_mutect2_GetPileupSummaries_{{ tumor.name }}_{{ aligner }}_{{ loop.index }}
  tags: [{{ tumor.gltype }}, tumor_only, snp_indel_caller, gatk_mutect2, {{ tumor.name }}]
  input:
    - {{ tumor_bam }}
  output: {{ temp_dir }}/{{ loop.index }}.tumor-pileups.table
  cpus: 2
  mem: 8G
  walltime: "24:00:00"
  container: {{ constants.tools.mutect.container }}
  sbatch_args: ['--profile=ltask', '--acctg-freq=task=1']
  container:
  digest:
  cmd: |
    sbatch -n1 -d$SLURM_JOB_ID --wrap="sh5util -j $SLURM_JOB_ID"
    set -eu
    set -o pipefail

    

    mkdir -p "{{ temp_dir }}/temp_GetPileupSummaries_tumor_{{ loop.index }}"

    {# GetPileupSummaries this can happen at the same time as the variant calling, no need to wait #}
    {# Tumor pileups #}
    gatk --java-options "-Xmx7G" GetPileupSummaries \
      --tmp-dir {{ temp_dir }}/temp_GetPileupSummaries_tumor_{{ loop.index }}/ \
      --reference {{ constants.tempe.reference_fasta }} \
      --input "{{ tumor_bam }}" \
      --interval-set-rule UNION \
      {% for interval in batch %}
      -L "{{ interval.contig }}:{{ interval.start }}-{{ interval.stop }}" \
      {% endfor %}
      --variant {{ constants.tempe.gnomad_genome_mutect_contamination }} \
      --output {{ temp_dir }}/{{ loop.index }}.tumor-pileups.table

{% endfor %}

- name: tumor_only_mutect2_merge_chunks_{{ tumor.name }}_{{ aligner }}
  tags: [{{ tumor.gltype }}, tumor_only, snp_indel_caller, gatk_mutect2, {{ tumor.name }}]
  reset: predecessors
  input:
    {% for b in constants.tempe.calling_intervals %}
    - {{ temp_dir }}/{{ loop.index }}.mutect2.vcf.gz
    {% endfor %}
  output:
    - {{ temp_dir }}/{{ tumor.name }}_{{ aligner }}.mutect2.raw.vcf.gz
    - {{ temp_dir }}/{{ tumor.name }}_{{ aligner }}.mutect2.raw.vcf.gz.tbi
  cpus: 1
  mem: 4G
  walltime: "24:00:00"
  container: {{ constants.tools.mutect.container }}
  sbatch_args: ['--profile=ltask', '--acctg-freq=task=1']
  container:
  digest:
  cmd: |
    sbatch -n1 -d$SLURM_JOB_ID --wrap="sh5util -j $SLURM_JOB_ID"
    set -eu
    set -o pipefail

    
    
    bcftools concat \
      --output-type z \
      --output "{{ temp_dir }}/{{ tumor.name }}_{{ aligner }}.mutect2.raw.vcf.gz" \
      {% for b in constants.tempe.calling_intervals %}
      {% if not loop.last %}
      "{{ temp_dir }}/{{ loop.index }}.mutect2.vcf.gz" \
      {% else %}
      "{{ temp_dir }}/{{ loop.index }}.mutect2.vcf.gz"
      {% endif %}
      {% endfor %}

    bcftools index --tbi --force "{{ temp_dir }}/{{ tumor.name }}_{{ aligner }}.mutect2.raw.vcf.gz"

- name: tumor_only_mutect2_merge_stats_{{ tumor.name }}_{{ aligner }}
  tags: [{{ tumor.gltype }},l tumor_only, snp_indel_caller, gatk_mutect2, {{ tumor.name }}]
  reset: predecessors
  input:
    {% for b in constants.tempe.calling_intervals %}
    - {{ temp_dir }}/{{ loop.index }}.mutect2.vcf.gz.stats
    {% endfor %}
  output: {{ temp_dir }}/merged.stats
  cpus: 2
  mem: 8G
  walltime: "24:00:00"
  container: {{ constants.tools.mutect.container }}
  sbatch_args: ['--profile=ltask', '--acctg-freq=task=1']
  container:
  digest:
  cmd: |
    sbatch -n1 -d$SLURM_JOB_ID --wrap="sh5util -j $SLURM_JOB_ID"
    set -eu
    set -o pipefail

    

    mkdir -p {{ temp_dir }}/temp_stats

    gatk --java-options "-Xmx7G" MergeMutectStats \
      --tmp-dir {{ temp_dir }}/temp_stats/ \
      {% for b in constants.tempe.calling_intervals %}
      -stats "{{ temp_dir }}/{{ loop.index }}.mutect2.vcf.gz.stats" \
      {% endfor %}
      -O "{{ temp_dir }}/merged.stats"

- name: tumor_only_mutect2_learn_readorientationmodel_{{ tumor.name }}_{{ aligner }}
  tags: [{{ tumor.gltype }}, tumor_only, snp_indel_caller, gatk_mutect2, {{ tumor.name }}]
  reset: predecessors
  input:
    {% for b in constants.tempe.calling_intervals %}
    - {{ temp_dir }}/{{ loop.index }}.f1r2.tar.gz
    {% endfor %}
  output: {{ temp_dir }}/artifact-priors.tar.gz
  cpus: 2
  mem: 8G
  walltime: "24:00:00"
  container: {{ constants.tools.mutect.container }}
  sbatch_args: ['--profile=ltask', '--acctg-freq=task=1']
  container:
  digest:
  cmd: |
    sbatch -n1 -d$SLURM_JOB_ID --wrap="sh5util -j $SLURM_JOB_ID"
    set -eu
    set -o pipefail

    

    mkdir -p {{ temp_dir }}/temp_readorientationmodel

    gatk --java-options "-Xmx7G" LearnReadOrientationModel \
      --tmp-dir {{ temp_dir }}/temp_readorientationmodel/ \
      {% for b in constants.tempe.calling_intervals %}
      -I "{{ temp_dir }}/{{ loop.index }}.f1r2.tar.gz" \
      {% endfor %}
      -O {{ temp_dir }}/artifact-priors.tar.gz

- name: tumor_only_mutect2_merge_pileup_summaries_{{ tumor.name }}_{{ aligner }}
  tags: [{{ tumor.gltype }}, tumor_only, snp_indel_caller, gatk_mutect2, {{ tumor.name }}]
  reset: predecessors
  input:
    {% for b in constants.tempe.calling_intervals %}
    - {{ temp_dir }}/{{ loop.index }}.tumor-pileups.table
    - {{ temp_dir }}/{{ loop.index }}.normal-pileups.table
    {% endfor %}
  output:
    - {{ temp_dir }}/merged.tumor-pileups.table.tsv
    - {{ temp_dir }}/merged.normal-pileups.table.tsv
  cpus: 2
  mem: 8G
  walltime: "24:00:00"
  container: {{ constants.tools.mutect.container }}
  sbatch_args: ['--profile=ltask', '--acctg-freq=task=1']
  container:
  digest:
  cmd: |
    sbatch -n1 -d$SLURM_JOB_ID --wrap="sh5util -j $SLURM_JOB_ID"
    set -eu
    set -o pipefail

    

    mkdir -p {{ temp_dir }}/temp_merge_tumor
    mkdir -p {{ temp_dir }}/temp_merge_normal

    {# Merge tumor pileup #}
    gatk --java-options "-Xmx7G" GatherPileupSummaries \
      --tmp-dir {{ temp_dir }}/temp_merge_tumor/ \
      --sequence-dictionary {{ constants.tempe.reference_dict }} \
      {% for b in constants.tempe.calling_intervals %}
      -I "{{ temp_dir }}/{{ loop.index }}.tumor-pileups.table" \
      {% endfor %}
      -O {{ temp_dir }}/merged.tumor-pileups.table.tsv

    {# Merge normal pileup #}
    gatk --java-options "-Xmx7G" GatherPileupSummaries \
      --tmp-dir {{ temp_dir }}/temp_merge_normal/ \
      --sequence-dictionary {{ constants.tempe.reference_dict }} \
      {% for b in constants.tempe.calling_intervals %}
      -I "{{ temp_dir }}/{{ loop.index }}.normal-pileups.table" \
      {% endfor %}
      -O {{ temp_dir }}/merged.normal-pileups.table.tsv

- name: tumor_only_mutect2_calculate_contamination_{{ tumor.name }}_{{ aligner }}
  tags: [{{ tumor.gltype }}, tumor_only, snp_indel_caller, gatk_mutect2, {{ tumor.name }}]
  reset: predecessors
  input:
    - {{ temp_dir }}/merged.tumor-pileups.table.tsv
    - {{ temp_dir }}/merged.normal-pileups.table.tsv
  output:
    - {{ temp_dir }}/contamination.table
    - {{ temp_dir }}/segments.table
  cpus: 1
  mem: 4G
  walltime: "24:00:00"
  container: {{ constants.tools.mutect.container }}
  sbatch_args: ['--profile=ltask', '--acctg-freq=task=1']
  container:
  digest:
  cmd: |
    sbatch -n1 -d$SLURM_JOB_ID --wrap="sh5util -j $SLURM_JOB_ID"
    set -eu
    set -o pipefail

    

    mkdir -p {{ temp_dir }}/temp_calculate_contamination

    gatk --java-options "-Xmx3G" CalculateContamination \
      --tmp-dir {{ temp_dir }}/temp_calculate_contamination/ \
      -I "{{ temp_dir }}/merged.tumor-pileups.table.tsv" \
      -matched "{{ temp_dir }}/merged.normal-pileups.table.tsv" \
      -O "{{ temp_dir }}/contamination.table" \
      --tumor-segmentation "{{ temp_dir }}/segments.table"

- name: tumor_only_mutect2_filter_calls_{{ tumor.name }}_{{ aligner }}
  tags: [{{ tumor.gltype }}, tumor_only, snp_indel_caller, gatk_mutect2, {{ tumor.name }}]
  reset: predecessors
  input:
    - {{ temp_dir }}/{{ tumor.name }}_{{ aligner }}.mutect2.raw.vcf.gz
    - {{ temp_dir }}/merged.stats
    - {{ temp_dir }}/artifact-priors.tar.gz
    - {{ temp_dir }}/contamination.table
    - {{ temp_dir }}/segments.table
  output:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
  cpus: 2
  mem: 8G
  walltime: "24:00:00"
  container: {{ constants.tools.mutect.container }}
  sbatch_args: ['--profile=ltask', '--acctg-freq=task=1']
  container:
  digest:
  cmd: |
    sbatch -n1 -d$SLURM_JOB_ID --wrap="sh5util -j $SLURM_JOB_ID"
    set -eu
    set -o pipefail

    


    mkdir -p "{{ results_dir }}"
    mkdir -p {{ temp_dir }}/temp_filter

    gatk FilterMutectCalls \
      --tmp-dir {{ temp_dir }}/temp_filter/ \
      --java-options "-Xmx7G" \
      --reference {{ constants.tempe.reference_fasta }} \
      --max-alt-allele-count 2 \
      --variant "{{ temp_dir }}/{{ tumor.name }}_{{ aligner }}.mutect2.raw.vcf.gz" \
      --stats "{{ temp_dir }}/merged.stats" \
      --contamination-table "{{ temp_dir }}/contamination.table" \
      --tumor-segmentation "{{ temp_dir }}/segments.table" \
      --ob-priors "{{ temp_dir }}/artifact-priors.tar.gz" \
      --filtering-stats "{{ temp_dir }}/filtering.stats" \
      --output "{{ all_vcf }}"

- name: tumor_only_mutect2_filter_variants_{{ tumor.name }}_{{ aligner }}
  tags: [{{ tumor.gltype }}, tumor_only, snp_indel_caller, gatk_mutect2, {{ tumor.name }}]
  input:
    - {{ all_vcf }}
    - {{ all_vcf }}.tbi
  output:
    - {{ pass_vcf }}
    - {{ pass_vcf }}.tbi
  cpu: 1
  mem: 4G
  container: {{ constants.tools.mutect.container }}
  sbatch_args: ['--profile=ltask', '--acctg-freq=task=1']
  container:
  digest:
  cmd: |
    sbatch -n1 -d$SLURM_JOB_ID --wrap="sh5util -j $SLURM_JOB_ID"
    set -eu
    set -o pipefail

    bcftools filter \
      --output-type z \
      --include 'FILTER == "PASS"' \
      {% if tumor.gltype == 'exome' %}
      --targets-file "{{ tumor.capture_kit.extended_bed }}" \
      {% endif %}
      "{{ all_vcf }}" \
      > "{{ pass_vcf }}"
    
    bcftools index --tbi --force "{{ pass_vcf }}"

    {% set task %}tumor_only_mutect2_filter_variants_{{ tumor.name }}_{{ aligner }}{% endset %}
    {% set directory %}{{ temp_dir }}{% endset %}
    {{- remove_files(directory,none,task) }}
    {{- vcf_stats(pass_vcf, results_dir) }}
    {{- vcf_stats(all_vcf, results_dir) }}

{% endmacro %}
