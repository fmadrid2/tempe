# DNA Alignment with BWA MEM
# Take DNA fastq data files to aligned bams with qc data
{% from 'modules/dna_alignment/bwa_mem2_samtools.jst' import bwa_mem2_samtools with context %}
{% from 'modules/dna_alignment/pb_fq2bam.jst' import fq2bam with context %}
{% from 'modules/dna_alignment/split_fastq.jst' import split_fastqs with context %}
{% from 'utilities/bam_to_cram.jst' import bam_to_cram with context %}
{% from 'utilities/read_group_line.jst' import read_group_line %}
{% from 'modules/qc/main.jst' import bam_qc with context %}


{% macro dna_alignment(samples) %}

  {# Not configurable by LIMS #}
  {% set reads_per_chunk = reads_per_chunk|default(40000000) %}

  {% for sample in samples.values() if sample.gltype in ['genome', 'exome'] %}

    {% set platform = (sample.read_groups.values()|first).rgpm|default('') %}
    {% if platform|lower in ['hiseq4000', 'novaseq6000'] %}
      {% set opt_dup_distance = 2500 %}
    {% else %}
      {% set opt_dup_distance = 100 %}
    {% endif %}

    {% if 'bwa' in sample.aligners %}
      {{- bwa_mem2_samtools(sample, reads_per_chunk, opt_dup_distance, aligner='bwa') }}
      {{- bam_qc(sample, aligner='bwa') }}
    {% endif %}
    {% if 'parabricks' in sample.aligners %}
      {{- fq2bam(sample, opt_dup_distance, aligner=aligner) }}
      {{- bam_qc(sample, aligner=aligner) }}
    {% endif %}

    {% if 'bwa' in sample.aligners %}
      {{- split_fastqs(sample, reads_per_chunk) }}
    {% endif %}

  {% endfor %}

{% endmacro %}
